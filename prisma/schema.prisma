generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  Role                   @default(USER)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  projects Project[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationCode {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  code    String   @unique
  expires DateTime

  @@unique([email, code])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

enum MediaType {
  PHOTO
  VIDEO
}

model Project {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String?
  isStarred      Boolean     @default(false)
  needsNarration Boolean     @default(true)
  needsMusic     Boolean     @default(true)
  aspectRatio    String      @default("16:9")
  frameRate      Int         @default(30) // 24, 30 & 60
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  userId         String      @db.ObjectId
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  media          Media[]
  mediaOrder     String[]
  narration      Narration?
  musicTrack     MusicTrack?
}

model Media {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  url         String
  type        MediaType
  width       Int
  height      Int
  description String?
  transition  String    @default("fade")
  duration    Int       @default(5)
  createdAt   DateTime  @default(now())
  projectId   String    @db.ObjectId
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Narration {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  transcript String
  audioUrl   String
  createdAt  DateTime @default(now())
  projectId  String   @db.ObjectId
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId])
}

model MusicTrack {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  prompt    String
  vibe      String
  createdAt DateTime @default(now())
  projectId String   @db.ObjectId
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId])
}
